1.
1)найдите информацию о том, как в Ubuntu открыть порт 80,443. Укажите как.

sudo ufw allow 80
sudo ufw allow 443

2)Установить nginx, сконфигурировать свой виртуальный хост, используя порт 80, так, чтобы:
на запрос клиента с указанным и непустым хидером 'User'. отправлять код 200 с текстом "Hi $user!", где $user - это значение хидера 'User'.
иначе отправлять код 404 с текстом "Page not found". и 3)Мне прислать конфиг nginx и команду curl, которую выполняете.

Вроде все что нужно прислал

cat/etc/nginx/sites-enabled/glinuxb.ru

server {
       listen 80;
       listen [::]:80;

       server_name glinuxb.ru;

       location / {
               if ($http_name != "Alexander"){
               		return 404 "Page not found";
               }
               		return 200 "Hi $http_name";
       	}

       location /admin {
       		return 200 "admin";
       			}
}

curl -H "name: NoAlexander" http://localhost  Page not found
curl -H "name: Alexander" http://localhost    Hi Alexander

2.
1)найти информацию о том, что такое самоподписанные сертификаты и сгенерировать такой для своего вэб сервера. Написать своими словами, что это такое и как сгенерить.

Cертификат, который пользователь сам подписал его для своего домена или IP это и есть самоподписанный сертификат.
SSL имеет две части закрытый ключ и публичный сертификат.Насколько я понимаю,то это не очень безопасно.
Создаем сертификат и private key
Для поддрержки прямой секретности сделаем ключ Диффи-Хелмана
Дальше идет настройка NGINX для поддержки SSL:
Мы указываем место хранения файлов SSL-сертификата и ключа,после этого настраиваем SSL и дальше настраиваем блоки server для обслуживания запросов SSL и поддержки новых настроек.

Затем нужно зайти в браузер и перейти по IP, но так как это все не надежно и не безопасно, браузер будет предупреждать об опасности.

2)добавить SSL соединение для дифолтного виртуального хоста nginx, используя порт 443. Прикрепить конфиги nginx.

sudo nano /etc/nginx/sites-available/default

server {
	listen 80 default_server;
	listen [::]:80 default_server;

	listen 443 ssl default_server;
	listen [::]:443 ssl default_server;
	ssl_certificate /etc/nginx/ssl/localhost.crt;
	ssl_certificate_key /etc/nginx/ssl/localhost.key;

	root /var/www/html;

	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		try_files $uri $uri/ =404;
	}
}
3)откройте в браузере страницу хоста и посмотрите, как браузер реагирует на самоподписанные сертификаты. Напишите, что видите.
Как говорил ранее, небезопасно и не надежно, поэтому браузер предупреждает об опасности.
https://localhost/ Warning: Potential Security Risk Ahead

4)мы говорили о необходимости шифровать симметрично. При этом проблем с получением ассиметричных сертификатов нет. Зачем такая сложная схема для установления SSL соединения? Почему бы не шифровать ассиметрично? Своими словами.

Ассиметричное шифрование тяжелее симметричного, потому что оно требует больше компьютерных ресурсов. Есть ограничения и на процесс генерации ключей.Симметричное работает быстрее, но зато симметричное шифрование довольно легко и быстрее хакнуть, особенно если пароль простой, который можно будет подобрать с помощью burp.

